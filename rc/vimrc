" 在janus通用vim配置加载后使用, 链接文件名为$HOME/.vimrc.after
" 安装的janus库文件在$HOME/.vim目录下，被官方git所管理。
"

" Encoding *******************************************************************
set fileencodings=utf-8,ucs-bom,cp936,gbk,gb2312,gb18030,big5,latin1

" Mappings ********************************************************************
let mapleader = ","

"Vertical split then hop to new buffer
:noremap ,v :vsp<cr>
:noremap ,h :split<cr>

:noremap ,n :NERDTreeToggle<CR>
:noremap ,q :q<cr>
:noremap ,w :w<cr>
:noremap ,t :tabnew<cr>

" enable control + vim directionkey remapping [hjkl]
:noremap <C-J> <C-W>j
:noremap <C-K> <C-W>k
:noremap <C-H> <C-W>h
:noremap <C-L> <C-W>l

" Professor VIM says '87% of users prefer jj over esc', jj abrams strongly disagrees
imap jj <Esc>

" Maps autocomplete to tab
imap <Tab> <C-N>

" Show ********************************************************************
" Whitespace stuff
" Use 2 spaces
set expandtab
set softtabstop=2
set smarttab

" Indenting *******************************************************************
set ai " Automatically set the indent of a new line (local to buffer)
set si " smartindent	(local to buffer)

" Colors **********************************************************************
colorscheme vividchalk

" Status Line *****************************************************************
set showcmd

" Line Wrapping ***************************************************************
"set nowrap
set linebreak  " Wrap at word
set wrap

" Sessions ********************************************************************
" Sets what is saved when you save a session
set sessionoptions=blank,buffers,curdir,folds,help,resize,tabpages,winsize

" Misc ************************************************************************
set backspace=indent,eol,start
set matchpairs+=<:>
set vb t_vb= " Turn off the bell, this could be more annoying, but I'm not sure how
set noswapfile

" Set list Chars - for showing characters that are not
" normally displayed i.e. whitespace, tabs, EOL
"function! Invisible_chars_show()
"  set listchars=trail:.,tab:>-,eol:$
"  set list
"endfunction
"function! Invisible_chars_hide()
"  set nolist
"endfunction


" Mouse ***********************************************************************
set mouse=a " Enable the mouse
behave xterm
set selectmode=mouse

" Omni Completion *************************************************************
autocmd FileType html           set omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript     set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType css            set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml            set omnifunc=xmlcomplete#CompleteTags
autocmd FileType c              set omnifunc=ccomplete#Complete
autocmd FileType ruby,eruby     set omnifunc=rubycomplete#Complete " may require ruby compiled in

let filetype_m='objc'

" fuzzyfinder_textmate ********************************************************
"map ,f :FuzzyFinderTextMate<CR>
map ,f :FuzzyFinderFile<CR>
map ,b :FuzzyFinderBuffer<CR>
let g:fuzzy_ignore = '.o;.obj;.bak;.exe;.pyc;.pyo;.DS_Store;.db'

" autocomplpop ***************************************************************
" complete option
set complete=.,w,b,u,t,k
let g:AutoComplPop_CompleteOption = '.,w,b,u,t,k'
"set complete=.
let g:AutoComplPop_IgnoreCaseOption = 0
let g:AutoComplPop_BehaviorKeywordLength = 2

set nobackup
set nowritebackup
set history=50    " keep 50 lines of command line history

" This is an alternative that also works in block mode, but the deleted
" text is lost and it only works for putting the current register.
"vnoremap p "_dp


if has("folding")
  set foldenable
  set foldmethod=syntax
  set foldlevel=1
  set foldnestmax=5
  set foldtext=strpart(getline(v:foldstart),0,50).'\ ...\ '.substitute(getline(v:foldend),'^[\ #]*','','g').'\ '

" automatically open folds at the starting cursor position
" autocmd BufReadPost .foldo!
endif

" Always display the status line
set laststatus=2

" Color scheme
highlight NonText guibg=#060606
highlight Folded  guibg=blue guifg=white
highlight FoldColumn guibg=darkgrey guifg=white

" Numbers
set numberwidth=5

" Snippets are activated by Shift+Tab
let g:snippetsEmu_key = "<S-Tab>"

" Tab completion options
" (only complete to the longest unambiguous match, and show a menu)
set completeopt=longest,menu

" remove gui menus
set guioptions-=m
set go-=T


" Vundle ***********************************************************************
set nocompatible               " be improved
filetype off                   " required!

" install => git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
set rtp+=~/.vim/bundle/vundle.vim/
" let Vundle manage Vundle
call vundle#rc()

" required!
Bundle 'gmarik/vundle'

" original repos on github
Bundle 'tpope/vim-fugitive'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}
Bundle 'tpope/vim-rails.git'

" vim-scripts repos
Bundle 'L9'
Bundle 'FuzzyFinder'

Bundle 'vim-scripts/maven-ide'

Bundle 'kchmck/vim-coffee-script'
let coffee_compile_vert = 1

Bundle 'fatih/vim-go'

Bundle "bronson/vim-trailing-whitespace"

Bundle 'ervandew/supertab'
Bundle 'godlygeek/tabular'
Bundle "majutsushi/tagbar"
Bundle 'plasticboy/vim-markdown'

Bundle "kien/ctrlp.vim"

Bundle "MarcWeber/vim-addon-mw-utils"
Bundle "tomtom/tlib_vim"
Bundle "garbas/vim-snipmate"
Bundle "honza/vim-snippets"

Bundle "nvie/vim-flake8"

Bundle "rtyler/ctags"

Bundle "Valloric/YouCompleteMe"

autocmd BufWritePost *.py call Flake8()

let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
\ }


call vundle#end()            " required
filetype plugin indent on    " required

syntax on
syntax enable
